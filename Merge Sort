def merge_sort(arr):
    # Если массив содержит более одного элемента, продолжаем деление
    if len(arr) > 1:
        # Определяем середину массива
        mid = len(arr) // 2
        # Разделяем массив на левую и правую половины
        left_half = arr[:mid]
        right_half = arr[mid:]

        # Рекурсивно вызываем merge_sort для каждой половины
        merge_sort(left_half)
        merge_sort(right_half)

        # Инициализируем индексы для левой половины, правой половины и исходного массива
        i = j = k = 0

        # Слияние отсортированных половин обратно в основной массив
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                # Если элемент в левой половине меньше, помещаем его в исходный массив
                arr[k] = left_half[i]
                i += 1
            else:
                # Если элемент в правой половине меньше или равен, помещаем его в исходный массив
                arr[k] = right_half[j]
                j += 1
            k += 1

        # Добавляем оставшиеся элементы из левой половины, если такие остались
        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        # Добавляем оставшиеся элементы из правой половины, если такие остались
        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1


# Пример использования функции
numbers = [38, 27, 43, 3, 9, 82, 10]
merge_sort(numbers)  # Сортируем массив
print(numbers)  # Выводим отсортированный массив
