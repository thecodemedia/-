def counting_sort(arr, exp):
    # Определяем длину массива
    n = len(arr)
    
    # Создаем массив для хранения отсортированных элементов
    output = [0] * n
    
    # Создаем счетный массив для цифр (0-9)
    count = [0] * 10

    # Подсчитываем количество элементов для каждой цифры в текущем разряде exp
    for i in range(n):
        index = arr[i] // exp  # Извлекаем текущую цифру
        count[index % 10] += 1  # Увеличиваем счетчик для этой цифры

    # Изменяем count так, чтобы count[i] хранил позицию этой цифры в output
    for i in range(1, 10):
        count[i] += count[i - 1]

    # Собираем отсортированные элементы на основе текущего разряда
    i = n - 1
    while i >= 0:
        index = arr[i] // exp  # Извлекаем текущую цифру
        output[count[index % 10] - 1] = arr[i]  # Помещаем элемент в нужную позицию в output
        count[index % 10] -= 1  # Уменьшаем счетчик
        i -= 1

    # Копируем отсортированные элементы из output обратно в оригинальный массив arr
    for i in range(len(arr)):
        arr[i] = output[i]

def radix_sort(arr):
    # Находим максимальное число, чтобы знать количество разрядов
    max1 = max(arr)
    
    # exp — текущий разряд (1, 10, 100 и т.д.)
    exp = 1
    while max1 // exp > 0:
        # Выполняем сортировку по текущему разряду, используя подсчет (counting_sort)
        counting_sort(arr, exp)
        exp *= 10  # Переходим к следующему разряду


# Пример использования функции
numbers = [170, 45, 75, 90, 802, 24, 2, 66]
radix_sort(numbers)  # Сортируем массив
print(numbers)  # Выводим отсортированный массив
